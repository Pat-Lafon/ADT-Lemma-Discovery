datatype LabeledTree<a> = Leaf | Node(elem: a, l: LabeledTree<a>, r:LabeledTree<a>)

  /* Some functions on lists */

  function treeb_member<a>(xs: LabeledTree<a>, e: a): bool
  {
    match xs
      case Leaf => false
      case Node(x, l, r) => if x == e then true else treeb_member(l, e) || treeb_member(r, e)
  }

  function treeb_left<a>(xs: LabeledTree<a>, u: a, v:a): bool
    // ensures treeb_left(xs, u, v) ==> treeb_member(xs, u);
  {
    if !(treeb_member(xs, u)) then false else
    if !(treeb_member(xs, v)) then false else
    match xs
      case Leaf => false
      case Node(x, l, r) => if x == u then treeb_member(l, v) else treeb_left(l, u, v) || treeb_left (r, u, v)
  }

  function treeb_right<a>(xs: LabeledTree<a>, u: a, v:a): bool
    // ensures treeb_right(xs, u, v) ==> treeb_member(xs, u);
  {
    if !(treeb_member(xs, u)) then false else
    if !(treeb_member(xs, v)) then false else
    match xs
      case Leaf => false
      case Node(x, l, r) => if x == u then treeb_member(r, v) else treeb_right(l, u, v) || treeb_right (r, u, v)
  }

  function treeb_parallel<a>(xs: LabeledTree<a>, u: a, v:a): bool
    // ensures treeb_parallel(xs, u, v) ==> treeb_member(xs, u) && treeb_member(xs, v);
  {
    if !(treeb_member(xs, u)) then false else
    if !(treeb_member(xs, v)) then false else
    match xs
      case Leaf => false
      case Node(x, l, r) =>
        (treeb_member(l, u) && treeb_member(r, v)) || treeb_parallel(l, u, v) || treeb_parallel(r, u, v)
  }

  function treeb_head<a>(xs: LabeledTree<a>, e: a): bool
  {
    match xs
      case Leaf => false
      case Node(x, l, r) => if x == e then true else false
  }

  function treeb_once<a>(xs: LabeledTree<a>, e: a): bool
  {
    treeb_member(xs, e) && !(treeb_left(xs, e, e) || treeb_right(xs, e, e) || treeb_parallel(xs, e, e))
  }

  function treeb_leaf<a>(xs: LabeledTree<a>, e: a): bool
  {
    match xs
      case Leaf => false
      case Node(x, l, r) =>
        ((
        match l
          case Node(a, b, c) => false
          case Leaf => (
            match r
              case Node(a, b, c) => false
              case Leaf => true)
                ) && (x == e)) ||
                (treeb_leaf(l, e)) || (treeb_leaf(r, e))
  }

  function treeb_node<a>(xs: LabeledTree<a>, e: a): bool
  {
    match xs
      case Leaf => false
      case Node(x, l, r) =>
        ((
        match l
          case Node(a, b, c) => true
          case Leaf => (
            match r
              case Node(a, b, c) => true
              case Leaf => false)
                ) && (x == e)) ||
                (treeb_node(l, e)) || (treeb_node(r, e))
  }
