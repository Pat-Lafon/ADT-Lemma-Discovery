(declare-fun list_member (Int Int) Bool)
(declare-fun list_head (Int Int) Bool)

(declare-const s1 Int)
(declare-const s2 Int)
(declare-const nu_top Int)
(declare-const nu_concat Int)
(declare-const nu_tail Int)
(declare-const nu Int)

(assert
(let ((a!1 (forall ((u Int))
             (and (not (list_member s1 u)) (not (list_head s1 u)))))
      (a!2 (forall ((u Int))
             (and (= (list_member nu u)
                     (or (list_member s1 u) (list_member s2 u)))
                  (= (list_head nu u) (or (list_head s1 u) (list_head s2 u))))))
      (a!3 (forall ((u Int)) (and (= (list_head s1 u) (= u nu_top)))))
      (a!4 (forall ((u Int))
             (and (=> (list_member nu_tail u) (list_member s1 u)))))
      (a!5 (forall ((u Int))
             (and (= (list_member nu u)
                     (or (list_member nu_concat u) (= u nu_top)))
                  (= (list_head nu u) (= u nu_top))
                  (=> (list_head nu u) (list_member nu u))))))
(let ((a!6 (ite a!1 a!2 (=> (and a!3 a!4 (forall ((u_0 Int)) true) a!5) a!2))))
  (not a!6)))
  )

(check-sat)
(get-model)
