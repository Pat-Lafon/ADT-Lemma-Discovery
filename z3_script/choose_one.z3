(set-option :timeout 2000)
(declare-fun order (Int Int Int Int Int) Bool)
(declare-fun member (Int Int) Bool)
;; (declare-fun Cons (Int Int Int) Bool)
(declare-fun Sort (Int Int) Bool)
(declare-fun Post (Int Int Int Int) Bool)
(declare-fun Plus1 (Int Int) Bool)
(declare-const a Int)
(declare-const b Int)
(declare-const u Int)
(declare-const v Int)

(define-fun Cons ((a Int) (l0 Int) (l1 Int)) Bool
  (forall ((u Int))
          (=> (or (= u a) (member l0 u)) (member l1 u)))
  )

(assert
(and (>= u 0)
       (<= 2 u)
       (>= v 0)
       (<= 2 v)
       (forall ((u Int))
               (=> (or (= u a) (member 0 u)) (member 1 u)))
       ;; (Cons a 0 1)
       (forall ((u Int) (v Int))
               (and (=> (member 1 u) (member 2 u))
                    (=> (order 2 0 1 u v) (>= u v))))
       ;; (Sort 1 2)
       (= b (+ a 1))
       ;; (forall ((u Int))
       ;;         (=> (or (= u b) (member 2 u)) (member 3 u)))
       ;; (forall ((a Int) (l0 Int) (l1 Int))
       ;;         (let ((a!1 (forall ((u Int))
       ;;                            (=> (or (= u a) (member l0 u)) (member l1 u)))))
       ;;           (= (Cons a l0 l1) a!1)))
       (Cons b 2 3)
       (forall ((u Int) (v Int))
               (and (=> (member 3 u) (member 4 u))
                    (=> (order 4 0 1 u v) (>= u v))))
       ;; (Sort 3 4)
       (Post a b 0 4)
       (forall ((a Int) (b Int) (l0 Int) (l1 Int))
         (let ((a!1 (not (and (=> (member l0 u) (member l1 u))
                              (=> (order l1 0 1 u v) (>= u v))
                              (order l1 0 1 b a)))))
           (= (Post a b l0 l1) a!1)))
       (forall ((x_0 Int)) (= (member 0 x_0) (= x_0 0)))
       (forall ((x_0 Int) (x_1 Int)) (= (order 0 0 1 x_0 x_1) false)))
)

(check-sat)
