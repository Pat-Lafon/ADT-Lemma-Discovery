(declare-fun p1 (Int Int) Bool)
(declare-fun p2 (Int Int) Bool)

(declare-const s1 Int)
(declare-const s2 Int)
(declare-const nu_top Int)
(declare-const nu_tail Int)
(declare-const nu_concat Int)
(declare-const nu Int)
(declare-const u0 Int)

(assert
 (let ((a!1 (forall ((u_0 Int) (u_1 Int) (u_2 Int))
                    (not (or (p1 s1 u_2) (p2 s1 u_1) (p1 s1 u_0) (p1 s1 u_1)))
                    )
            )
       (a!2 (forall ((u_0 Int) (u_1 Int) (u_2 Int))
                    (let ((a!1 (=> (p2 s1 u_2)
                                  (and (= u_2 u_1)
                                       (=> (p1 s1 u_0) (= u_2 u_0)))))
                          (a!2 (=> (and (not (p2 s1 u_2)) (p2 s1 u_0))
                                  (= u_1 u_0)))
                          (a!3 (=> (not (= u_0 nu_top))
                                  (and (not (p2 s1 u_0))
                                       (=> (p2 s1 u_2) (= u_2 nu_top))))))
                      (let ((a!4 (and (=> (and (= u_0 nu_top) (p1 s1 u_2))
                                         (= u_2 u_0))
                                      a!3)))
                        (let ((a!5 (=> (and (not (p2 s1 u_1))
                                           (not (p1 s1 u_1)))
                                      a!4)))
                          (and (p2 s1 nu_top)
                               (=> (p2 s1 u_1)
                                  (and (= u_1 nu_top) (p1 s1 u_1) a!1 a!2))
                               a!5)))))
            )
       (a!3 (forall ((u_0 Int) (u_1 Int) (u_2 Int))
                    (let ((a!1 (=> (p2 nu_concat u_1)
                                  (and (not (p1 s2 u_2))
                                       (not (p1 nu_tail u_1)))))
                          (a!2 (=> (and (not (p2 nu_concat u_1))
                                       (p2 s2 u_0)
                                       (p1 nu_tail u_2))
                                  (and (= u_2 u_1) (= u_2 u_0))))
                          (a!4 (=> (and (not (p1 nu_tail u_1))
                                       (p2 nu_tail u_0))
                                  (p1 s2 u_1)))
                          (a!7 (=> (and (not (p1 s2 u_2))
                                       (p2 nu_concat u_0))
                                  (and (p2 nu_tail u_0)
                                       (=> (p1 nu_concat u_2)
                                          (p1 nu_tail u_2)))))
                          (a!9 (=> (and (p1 nu_tail u_2)
                                       (p1 s2 u_2)
                                       (p2 nu_concat u_2))
                                  (and (p2 nu_tail u_2)
                                       (=> (p1 nu_concat u_0)
                                          (p1 s2 u_0)))))
                          (a!10 (and (p1 s2 u_0)
                                     (=> (not (= u_2 u_0)) (not (p1 s2 u_2)))))
                          (a!11 (=> (and (= u_1 u_0) (not (= u_2 u_1)))
                                   (and (not (p1 s2 u_2))
                                        (not (p2 nu_concat u_2))))))
                      (let ((a!3 (and (p1 s2 u_1)
                                      (=> (not (p2 nu_tail u_1))
                                         (and (p1 nu_concat u_1) a!1 a!2))))
                            (a!5 (and (=> (and (p1 nu_tail u_1)
                                              (p1 s2 u_1))
                                         (and (p2 nu_tail u_2) (= u_1 u_0)))
                                      a!4))
                            (a!12 (=> (not (p1 nu_concat u_1))
                                     (and (not (p2 nu_concat u_1))
                                          (not (p1 s2 u_1))
                                          (not (p2 nu_tail u_2))
                                          a!11))))
                        (let ((a!6 (=> (p1 s2 u_2)
                                      (and (p1 nu_concat u_2)
                                           (=> (p1 nu_tail u_2) a!5))))
                              (a!13 (=> (not (p1 nu_concat u_0))
                                       (and (not (p2 nu_concat u_0))
                                            (not (p1 s2 u_0))
                                            a!12))))
                          (let ((a!8 (and (=> (and (p2 s2 u_2)
                                                  (p2 nu_concat u_2))
                                             (p2 nu_tail u_2))
                                          (=> (not (p2 s2 u_2)) (and a!6 a!7))))
                                (a!14 (and (=> (and (p1 nu_concat u_0)
                                                   (p1 nu_concat u_1))
                                              a!10)
                                           a!13)))
                            (let ((a!15 (and a!9 (=> (not (p1 nu_tail u_2)) a!14))))
                              (let ((a!16 (and (=> (and (p1 nu_tail u_0)
                                                       (p1 s2 u_0))
                                                  a!8)
                                               (=> (not (p1 nu_tail u_0)) a!15))))
                                (and (=> (p2 s2 u_1) a!3)
                                     (=> (not (p2 s2 u_1)) a!16)))))))))
            )
       (a!4 (forall ((u_0 Int) (u_1 Int) (u_2 Int))
                    (and (not (p2 nu u_1))
                         (=> (not (p2 nu nu_top)) (p2 nu_concat u_2))))
            )
       (a!6
        (and (= (p1 nu u0)
                (or (p1 s1 u0) (p1 s2 u0)))
             (=> (p2 nu u0) (or (p2 s1 u0) (p2 s2 u0)))))
       )
   (let ((a!5 (or (and a!1 (= s2 nu))
                  )))
     (and a!5 (not a!6))))
 )
(check-sat)
