(declare-fun order (Int Int Int Int Int) Bool)
(declare-fun member (Int Int) Bool)
(declare-fun Cons (Int Int Int) Bool)
(declare-fun Sort (Int Int) Bool)
(declare-fun Post (Int Int Int Int) Bool)
(declare-fun Plus1 (Int Int) Bool)
(declare-const l0 Int)
(declare-const l1 Int)
(declare-const l2 Int)
(declare-const l3 Int)
(declare-const l4 Int)
(declare-const a Int)
(declare-const b Int)
(declare-const u Int)
(declare-const v Int)

(assert
(let ((a!1 (forall ((a Int) (b Int)) (= (Plus1 a b) (= b (+ a 1)))))
      (a!2 (forall ((x_0 Int)) (= (member l0 x_0) (or (and (= x_0 0)))))))
  (and (>= u 0)
       (<= 2 u)
       (>= v 0)
       (<= 2 v)
       (= l0 0)
       (= l1 1)
       (= l2 2)
       (= l3 3)
       (= l4 4)
       (Cons a l0 l1)
       (Sort l1 l2)
       (Plus1 a b)
       (Cons b l2 l3)
       (Sort l3 l4)
       (Post a b l0 l4)
       (forall ((l0 Int) (l1 Int))
         (let ((a!1 (forall ((u Int) (v Int))
                      (and (=> (member l0 u) (member l1 u))
                           (=> (order l1 0 1 u v) (>= u v))))))
           (= (Sort l0 l1) a!1)))
       (forall ((a Int) (b Int) (l0 Int) (l1 Int))
         (let ((a!1 (not (and (=> (member l0 u) (member l1 u))
                              (=> (order l1 0 1 u v) (>= u v))
                              (order l1 0 1 b a)))))
           (= (Post a b l0 l1) a!1)))
       a!1
       (forall ((a Int) (l0 Int) (l1 Int))
         (let ((a!1 (forall ((u Int))
                      (=> (or (= u a) (member l0 u)) (member l1 u)))))
           (= (Cons a l0 l1) a!1)))
       a!2
       (forall ((x_0 Int) (x_1 Int)) (= (order l0 0 1 x_0 x_1) false))))
)

(check-sat)