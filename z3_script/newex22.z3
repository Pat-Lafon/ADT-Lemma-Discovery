(declare-fun spec ((Int) (Int)) Bool)
(declare-fun post ((Int) (Int)) Bool)
(declare-fun Member ((Int) (Int)) Bool)
(declare-fun Link ((Int) (Int) (Int) (Int) (Int)) Bool)
(declare-fun Next ((Int) (Int) (Int) (Int) (Int)) Bool)
(declare-const l1 Int)
(declare-const l2 Int)
(assert
  (forall ((dt Int) (u Int) (v Int))
          (let ((a!1 (or (Next dt 0 1 u v)
                         (exists ((w Int))
                            (and (Next dt 0 1 u w) (Link dt 0 1 w v))))))
            (= (Link dt 0 1 u v) a!1)))
  )
(assert (not
         (=>
          (forall ((u Int)) (not (Link 1 0 1 u u)))
          (forall ((u Int) (v Int) (w Int))
                  (=> (and (Next 1 0 1 u v) (Next 1 0 1 u w)) (= v w))
                  )
          )
         )
        )
(check-sat)
